【effectskip】
エフェクト中にクリックをしたらエフェクトがスキップされるかどうかを指定します。
デフォルトでは１（スキップする）になっています。０にするとスキップしません。
例）effectskip 1

【checkkey】
キーの押下状態を取得します。
例）checkkey %1," "
スペースキーが押されていれば1押されていなければ0を%1に取得する。
文字列には、英字１文字、数字、スペースなどはそのまま指定できます。
"SPACE"でもスペースキーは取得できます。
"RETURN" "ENTER" リターンキー
"CTRL" コントロールキー
"UP" "DOWN" "LEFT" "RIGHT" カーソルキー上下左右
"F1"〜"F12" ファンクションキー
"PAGEUP" "PAGEDOWN" ページアップ、ダウンキー
"SHIFT" シフトキー
を指定します。

【getcursorpos2】
getcursorpos命令と似ていますが、この命令は「最後に表示した文字の左上座標」を取得します。
例）
getcursorpos2 %0,%1


nsogg2.dllを使って、フェードイン／アウト処理が非同期で実行できるようになりました。

カラーコードが文字列で指定できるようになりました。
例）
textcolor $0

【texec2】
texec命令とほぼ同じだが、その場で文字を消さない。次の行を表示するときにクリアする。
（これは、選択肢時にテキストを消したくないときなどにつかいます）

【english】
NScripterを英文モードにします。半角英字のみの文章を正しく表示できるようになります。
このモードを使う時は、行頭を>にしてください。
例）
*define
english
game
*start
>Peter Piper picked a peck of pickled peppers;@
end

【BGM命令の新機能】
nsogg.dllを使っているときのみ、
bgm "(曲先頭からの時間)ファイル名"
とすることで、ループ時に戻る点を指定できます。単位は秒です。小数が指定できます。
bgm "(5.37)boss.ogg"

【lsp2 lsph2 lsp2add lsph2add】
例）
lsp2 0,":c;test.bmp",320,240,100,200,36

拡張スプライトのロード命令です。拡張命令は、通常のスプライトと同様の移動やα値変更の他に、画像の中心を中心とした回転、拡大縮小、左右上下反転、そして加算ブレンディングが可能です。
lsp2は表示状態、通常のブレンディング
lsph2は非表示状態、通常のブレンディング
lsp2は表示状態、加算ブレンディング
lsph2は非表示状態、加算ブレンディング
の状態でロードします。与えるパラメータは同じです。
lsp2 拡張スプライト番号,画像ファイル名,中心X座標,中心Y座標,X拡大率,Y拡大率,回転角(,初期α値、省略すると255)
なお、拡大率にマイナスの値を与えるとその方向に反転します。単位はパーセントです。回転角は反時計回りで単位は度です。

【csp2】
例）
csp2 0
拡張スプライトを消去します。

【msp2 amsp2】
例）
msp2 0,10,20,-10,10,5

拡張スプライトの移動命令です。msp2は現在値からの相対指定、amsp2は値そのものの指定です。
パラメータは、
msp2 拡張スプライト番号,中心X増分,中心Y増分,X拡大率増分,Y拡大率増分,回転角増分(,α値増分)
amsp2 拡張スプライト番号,中心X座標,中心Y座標,X拡大率,Y拡大率,回転角(,α値)

【vsp2】
例）
vsp2 0,0

拡張スプライトの表示／非表示を切り替える命令です。vspと使い方は同じです。

【allsp2hide】【allsp2resume】
拡張スプライト全体の表示を一時的にマスクすることが出来ます。allsphide allspresumeと使い方は同じです。

これらの拡張スプライト機能を使ったゲーム「魔法少女マナ」がもうすぐ発売されます。


【rubyon2】
例）rubyon2 ルビサイズX,ルビサイズY
その行にルビがあるときだけルビ表示モードにします（linepageとの併用を想定してます）。
ルビが増える分画面が狭くなることにご注意ください。


【nextcsel】
例）nextcsel %0
次の命令がcselである場合、1を返します。文字を消さずに選択肢を出したい時に使えます。


【textbtnoff】
デフォルトでは、テキストボタンはbtnwait時に自動的に登録されます。
btndefとbtnwait系命令の間にtextbtnoffをはさむと、テキストボタンが一時的にオフになります。
例えば、テキストボタン処理の中から別のボタン処理を呼ぶときに、テキストボタンをオフにするためにこの命令を使ってください。
例）
btndef clear
textbtnoff
textbtnwait %0


【gettaglog】
getlog命令と同じ要領で、指定した数だけ前のページのタグを取得します。
バックログにタグも残りますので、バックログのカスタマイズをするときに、名前や音声をタグで指定しておけば、それを読み出すことが出来るので便利です。

例）
gettaglog $0,2
タグ指定が無かった場合は""を返します。
ここで、gettag命令では文字列を/区切りで分離して変数に格納できましたが、gettaglog命令ではそれが出来ません。
次のようにすれば、gettagと同じように分離出来ます。

例）
gettag $1,$2
のようなことをログに対してしたい場合

gettaglog $0,2
split $0,"/",$1,$2




【setkinsoku】
文字列を、行頭禁則文字列,行末禁則文字列の順で指定することで、
禁則文字列を一から設定しなおします。define節専用です。

【addkinsoku】
文字列を、行頭禁則文字列,行末禁則文字列の順で指定することで、
現在の禁則文字列に設定を追加します。define節専用です。

どちらも、一文字だけでも設定できますし、複数並べれば、
それらが全て禁則文字になります。


命令fontをつけました。テキスト表示のフォントを変えます。
例）font "ＭＳ 明朝"
一回文字をクリアしたその次の表示から適用されますので、
画面に文字が表示されてないうちに使ったほうがいいと思います。


spfontの仕様を変更しました（clear設定がついた）。


returnで飛び先が指定可能になりました。
例）
return *return_label
基本的にreturnとgosubはセットなので、あまり使うことは無い機能だと思いますが、たとえばテキストボタンからザッピングのような働きをさせたいときに使えます。


【errorsave】
エラー時、自動的に999番にセーブされます。


【bgmfadein】または【mp3fadein】
bgmfadeoutと同じ要領で、フェードインの設定をします。


【kidokumode】
kidokumode 0で既読スキップオフ、
kidokumode 1で既読スキップオンです。


文字列を+で連結できるようになりました。
例）
mov $1,"●
mov $2,"あいうえお"+$1+"さしすせそ"
これで、$2は"あいうえお●さしすせそ"になります。

もちろん、代入元と代入先が同じでも大丈夫です。
mov $0,"テスト"
mov $0,$0+"あいうえお"
これで$0は"テストあいうえお"になります。
今まで面倒だった文字列の連結が楽になりました。



文字列スプライトで、「アンチエイリアスなし」「黒ふち袋文字」を選べます。
文字列スプライトの指定の標準形は
":s/20,20,1;#FFFFFFサンプル文字列です"
これですが、ここで、四つ目のパラメータを追加できます。
四つ目のパラメータが0でアンチエイリアスあり、1でアンチエイリアスなし、2で袋文字になります。
":s/20,20,1,0;#FFFFFFサンプル文字列です" ;通常
":s/20,20,1,1;#FFFFFFサンプル文字列です" ;アンチエイリアスなし
":s/20,20,1,2;#FFFFFFサンプル文字列です" ;袋文字
今のところ一行文字列スプライトだけですが、表示文字列と複数行文字列スプライトにもすぐに対応させる予定です。



【strsp】【strsph】
strsp スプライト番号,文字列,左上Ｘ,左上Ｙ,横文字数,縦文字数,字幅,字高さ,字間Ｘ,字間Ｙ,ボールド指定(0or1),影指定(0or1)(,色指定)...
複数行の文字列スプライトを指定します。普通に禁則処理が行われますが、明示的に改行したいときは\を指定してください。
spfontのフォント設定が反映されます。色指定をひとつまたは複数書くことで、セルの色指定が出来ます（色指定の数だけのセルが出来ます）
strsphは、非表示状態で複数行文字列スプライトを作ります。パラメータは同じです。


表示文字列の中で変数に値を代入できるようになりました。
{}で囲んで、その中で変数名,値を指定すると、その値が変数に代入されます。
ただし、エイリアスは使えません。
{変数名,値,変数名,値}のように、複数個書くと、それらの代入操作が全て実行されます。



テキストボタンを扱う命令を作りました。
テキストの一部をボタンとして使用する機能で、btnwait系命令でしか使えないので、
textgosubによるシステムカスタマイズが前提となります。
使い方は、サンプルを参照してください。



【erasetextbtn】
テキストボタンを押してボタンモードを抜けたとき、押されたままになりますが、そのテキストボタンを消して元通りの色にします。

【linkcolor】
linkcolor カーソルオフ時の色,カーソルオン時の色
テキストボタンの色を設定します。
デフォルトでは、黄色と水色です。
例）
linkcolor #FFFF88,#88FF88

【textbtnstart】
textbtnstart デフォルトのボタン番号開始値
例）
textbtnstart 3
テキストボタン番号を省略したときの先頭の値を指定します。
デフォルトは１です。


【gettextbtnstr】
gettextbtn 文字変数,テキストボタン番号
例）
gettextbtn $0,12
テキストボタン番号に対応した文字列を取得します。
無い場合は""が代入されます。

【textexbtn】
textexbtn テキストボタン番号,制御文字列
これは、テキストボタンでexbtnと同様の処理をするためのものです。



csv（コンマ区切りテキストファイル）の入出力を扱う命令を作りました。詳しくはフォルダ「csvファイルを扱う機能について」をご覧ください。

shadedistance命令とspfont命令をどこでも使えるようにしました。
ただし、リセットしても設定は元通りにならないので、各自で管理してください。

＜複合ボタン命令の機能追加＞
C100-150というように指定すれば、100から150までのスプライトがみんな非表示になるようになりました。
これはspstrでも使えます。
例）
exbtn_d "C100-150"
spstr "C100-125"

【debuglog】
デバッグウィンドウに表示される文をdebuglog.txtというテキストファイルに保存していくことが出来る命令です。
debuglog 1でオン、debuglog 0でオフです。define節でもstart以降でも使えます。

【getspmode】
スプライトが表示状態なら１、非表示状態なら０を返す命令です。
例）
getspmode %2,10
スプライト１０番が表示状態なら１、非表示状態なら０を返します。

【drawsp3】
drawsp系の命令で、一次変換を実現するものです。スプライトを描画します。スプライト番号、セル番号、透過度、α値、表示先中心x座標,表示先中心y座標、行列の要素左上、右上、左下、左下の順で指定します。行列の要素は実際の１０００倍の値になります。また、Ｙ軸は普通数学で使うものと同じく、Ｙ軸は上へ伸びているものと考えてください。

例）drawsp3 2,1,128,20,40,1500,300,800,1200
座標(20,40)に、スプライト２番セル１番を、
一次変換行列
{1.500  3.00}
{8.00  1.200}
で変換した画像を表示します。

【getsavestr】
savegame2で保存した文字列を取り出します。
例）getsavestr $1,12
↓の例で保存した"８月５日　ヒロインＡルート"が取り出される。

【savegame2】
セーブファイルそれぞれに固有の文字列を保存します。あとはsavegameと同じです。
例）savegame2 12,"８月５日　ヒロインＡルート"

【clickskippage】
通常、クリックによってメッセージが次のクリック待ちまで瞬時表示になりますが、この時、通常クリック待ちではなくそのページの改頁待ちまで一気に飛ぶようにします。define節専用命令です。

【r_trap】
右クリックのみで反応する以外はtrap,lrtrapと同じです。

【fileexist】
（マニュアルに抜けがあったのでここで紹介します）
ファイルが存在すれば1、しなければ0を返します。nsaアーカイブからも検索します。
例）
fileexist %0,"test.bmp"

【getwindowsize】
getwindowsize 幅を受け取る変数,高さを受け取る変数
ウィンドウのクライアント領域（メニューなどを除いた、画像が描画される部分の大きさ）を取得します。デフォルトでは640と480です。
例）
getwindowsize %0,%1

【getspsize】
スプライトのサイズを取得します。
getspsize スプライト番号,幅を受け取る変数,高さを受け取る変数(,セル数を受け取る変数)
セル数を受け取る変数は省略できます。
例）
getspsize 0,%0,%1
getspsize 0,%0,%1,%2

＜drawsp2のバグ修正について＞
ver2.51もしくはそれ以前のNScripterでは、drawsp2でα値を持った画像を扱うときに限り、透過度が本来と反対に0で非透過、255で透過と扱われるバグがありました。ver2.52でこれに修正を入れましたが、そのせいで、旧バージョンのスクリプトを使うときにはdrawsp2に与える３つめのパラメータを修正する必要が出来ました。申し訳ありません。

【bgcopy】
bgcpyでも同じ意味になります。現在の画面を背景画面として取り込みます。
ofscpyもしくはofscopyとの違いは、背景画面になっているので、この上にテキストウィンドウなどを表示できることです。
ver2.51で、この命令で作った背景画像はセーブでちゃんと保存されるようになりました。

【getskipoff】
btndefとtextbtnwaitの間で使ってください。
スキップオフを-60で、オートモードオフを-61で取得します。

ＰＮＧ形式からNScripterのαブレンド形式の画像へ変換できるツールpng2abmpを作成しました。今後はなるべくこれを使ってください。


【movie】
mpegplayに変わる次期主力となる予定のムービー再生命令です。
movie "ファイル名" ;単に終わるまで再生する。クリックでスキップできない。
movie "ファイル名",pos,10,20,320,240 ;左上の座標10,20 大きさ320x240で再生
movie "ファイル名",click ;クリックで、その場で停止して再生終了（async時無効）
movie "ファイル名",loop ;ループ再生します（asyncもしくはclickを指定しないと止める方法がないということになるので注意）
movie "ファイル名",async ;非同期再生します。この命令は再生を始めた時点で処理をNScripterに戻し、通常通りのスクリプト動作を続けたまま、ムービーが再生されます。ムービーは常に最前列として扱われます。字よりも上なので注意。
movie stop ;asyncで非同期再生をしているムービーを止めます
これらは組み合わせることが出来ます。

例）
movie "test.mpg",pos,10,20,320,240,async,loop

【logsp2】
（これから作る人はstrsp命令を使うことをお勧めします。）
logspの拡張版で、文字サイズが指定出来ます。
例）logsp2 2,$0,150,20,17,17,0,1
左から、スプライト番号、文字列,Ｘ座標,Ｙ座標,文字幅,文字高さ,文字間Ｘ,文字間Ｙ.色指定...
指定文字列には、getlogで取得した文字列が使えるほか、ユーザ指定の文字列も使えます。ルビ機能は普通の文字列と同様にあつかえます。\マークを入れれば改行を意味します。複数行の文字列スプライト機能として使えます。
色指定に関してはlogspと同様です。

【bw2a3】
白抜きと黒抜きから、NScripter形式の透過画像を作ります。製作作業用の命令です。
（これから使う人はツールpng2abmpのほうを使うことをお勧めします））
nscripterと同じ位置にフォルダ"b"とフォルダ"w"を作り、それぞれ白抜きと黒抜きを入れてください（白抜きと黒抜きについてはbw2aの説明をご覧ください）
ファイル名は元と同じでいいのがミソです。フォトショップのアクションを使えば作業が効率化できるでしょう。
例）
bw2a3 "test.bmp"
b\test.bmpとw\test.bmpからout\test.bmpを作ります。
このout\test.bmpが目的の画像です。

【savedir】
セーブデータを格納するフォルダを指定します。
ただし、envdataだけはnscr.exeと同じフォルダに出来てしまいます。
あらかじめフォルダは掘っておいてください。
例）
savedir "savedata"

【itoa2】
itoaと同様に数値を文字列に変換しますが、この命令では全角文字列になります。表示したいときに便利です。
例）
itoa2 $0,%4

【lrclick】
左クリックもしくは右クリックを待ちます。
どちらで返ってきたかはgetretで取得できます。
lrclick
getret %0
で、0で右クリック、1で左クリックです。

【textfield】
ウィンドウ上にテキスト入力ウィンドウを開き、入力を待ちます（ダイアログではありません）。
例）
textfield $0,100,50,320,70,10,20,1
左から順に、結果を格納する文字列変数、ウィンドウ左上Ｘ座標、Ｙ座標、右下Ｘ座標、Ｙ座標、文字幅（１バイト文字のものですので２バイト文字の場合ここでの指定の倍になります）、文字高さ、全角フラグ（１で全角文字しか入力できなくなります）
ここで、指定する文字列変数にあらかじめ入っていた内容がデフォルトの文字列になります。
入力ウィンドウ外を左クリック、もしくはリターンキー、エスケープキー、TABキーを押した時に、関数から戻ってきます。
TABキーを押した場合は、getretでその旨判別できます。この命令の後、
getret %0
として、%0に０が返ってくればTAB以外、１が返ってくればTABで命令を抜けたということを示します。

【cellcheckexbtn】
cellcheckspbtnのexbtnバージョンです。引数はexbtnと同じです。
スプライトがロードされ、かつ、セルが二つ以上あるときのみ拡張ボタンとして設定します。そうでないときは無視されます。
なお、exbtnについては「サンプル」「メニューのカスタマイズと複合ボタン」を参照してください。新機能S（音声再生）とM（スプライト移動）が増えています。

【pretextgosub】
*define節命令です。テキスト表示の直前にこのフラグで示されるサブルーチンへジャンプします。
例）
pretextgosub *pretext_lb

pretextgosub命令を使うと、表示文の直前に「タグ」を付けることが出来ます。
「タグ」は、「[」と「]」で囲まれた部分のことです。
例）
[太郎/0001.wav]テスト用の文章です。


【gettag】
*pretextgosubで指定したサブルーチンから、タグの内容を取得します。
splitに似ていますが、""は必要ありません。/区切りです。
省略されたものは""もしくは0で補います。
タグそのものが省略されているときは、すべてが""もしくは0で補われます（ここがポイント）
例）gettag $0,$1　になってる場合、

[太郎/0001.wav]テスト用の文章です。 ;→$0="太郎" $1="0001.wav"
省略することも出来ます。 ;→$0="" $1=""

ボイスや名前タグの処理に使ってください。


【indent】
改行時に指定文字数だけ右インデントします。上のpretextgosubと組み合わせれば、
台詞内改行の時だけ右に何文字かずらしたいというときに使えます。
例）
indent 2

＜これらの一連の命令の使用例＞

pretextgosub *pretext_lb

*pretext_lb
dwavestop 0
gettag $0,$1
if $0="" indent 0:goto *next_tag
mov $2,$0
add $2,"/"
puttext $2
;↑単純に名前だけputtextで表示したのでは最後に改行されてしまうので、
;末尾に/を付けて改行を抑制している
indent 3
;台詞なのでインデント指定
*next_tag
if $1="" return
dwave 0,$2
;ボイス再生
return


【ispage】
textgosubサブルーチン時、呼び出し理由が改ページだったら1、単なるクリック待ちだったら0を指定した数字変数に返します。
例）ispage %0


【maxkaisoupage】
*define節命令です。回想モードの最大ページ数を設定します。
例）
maxkaisoupage 10

【checkpage】
回想文字列を取得できるかどうかを調べます。
第一引数は結果を格納する数字変数、第二引数は何ページ前かを指定します。
1で取得可能、0で不可能です。第二引数には１以上を指定してください。
０は現在のページなので、この関数を使わなくても処理できるはずです。
例）
checkpage %5,1 ;一ページ前のログが取得できるかどうかを確かめる。


【texthide】
テクストウィンドウは表示したままで、文字だけを消します。
バックログを作るときに有意義です。

【textshow】
texthideで消した文字を復帰します。


【getlog】
バックログ用の文字列を取得します。改行情報やルビ情報も格納されています。
第一引数に格納先文字列変数、第二引数にcheckpageと同じく何ページ前かを指定します。
例）getlog $0,%5

【logsp】
getlogで取得した文字列から、バックログ用の文字画像をスプライトとして取得します。
いったん文字列を経由するのは、将来的に加工することを考えてのことです。
第一引数にスプライト番号、第二引数にバックログ文字列、第三〜四引数で左上の座標、第五引数行以降は、文字色（元の文字色に関係なく単色になります）を指定します。省略すると#FFFFFF、複数指定すると、その数だけセルのある複数セルスプライトになります。
例）
logsp 8,$0,60,90
logsp 8,$0,60,90,#FFFF88
logsp 8,$0,60,90,#888888,#FFFF88

ワンポイントテクニック（プログラムの知識がある人用）：
＜splitは構造体の代わりになる＞
一つの文字列変数の中に複数のデータを格納できるsplitは、構造体の代わりになります。
$0="文字列"
%0=12
%1=5
というようなデータを一度に$1に格納しておきたいときは、

mov $1,$0 ;$1="文字列"
add, $1,"," ;$1="文字列,"
itoa $2,%0
add $1,$2 ;$1="文字列,12"
add $1,"," ;$1="文字列,12,"
itoa $2,%1
add $1,$2 ;"$1="文字列,12,5"

あとで取り出したいときは、
split $1,",",$0,%0,%1

splitで足りない分は、文字列なら"",数字なら0で埋められるので、可変長リストにも使えますね。
split $10,",",$0,$1,$2,$3,$4,$5,$6
$10は、０〜６個までの文字列リストを,区切りで格納したものになります。

今商業で作ってるのは、ノベル形式で、一画面に不特定数のボイスがあって、
それをバックログで再生できる物なのですが、一画面分のボイスデータと
座標を記憶するときに、このテクニックを使っています。

【okcancelbox】
【yesnobox】
例）
okcancelbox %0,"セーブします。","セーブ確認"
yesnobox %0,"ロードしますか？","ロード確認"

WindowsのＯＫ/キャンセル、もしくははい／いいえ式のダイアログボックスを出して、ユーザからの入力を変数に代入する。１がＯＫもしくは「はい」、0がキャンセルもしくは「いいえ」。

【textspeeddefault】
テキスト表示速度をデフォルトにする。表示文ではないので、文字ウィンドウ出ていないときは表示されないままで実行できる。

【humanorder】
humanorder "文字列",エフェクト番号
例）
humanorder "rcl",1
humanorder "clr",3,1000

立ち絵間の優先順位を指定する。

【bgmdownmode】
例）
bgmdownmode 1
音声再生時にＢＧＭボリュームを下げる。

【tateyoko】
例）
tateyoko 1
縦書きモードにする。詳細はサンプルで。
※このほか、システムカスタマイズ命令は、システムカスタマイズサンプルで解説しています。
　縦書きモードもそちらにあります。

【loadgosub】
例）
loadgosub *loadlb
ロード直後に呼び出すサブルーチンを指定します。
このサブルーチンは、セーブした状態を復元したその直後に呼ばれます。
つまり、セーブできるところならどこからでも呼ばれうるものであることに
注意して慎重にスクリプトを組んでください。
プラグインで音楽を再生したりしている場合、その復元は手動でしなければ
ならないので、そのためにこの命令を用意しました。

【defsub】（define節のみ）
指定した名前のユーザ定義命令を作ります。
実際にはサブルーチンとして実装されます。
命令名は変数と同じ法則で名づけることが出来ますが、先頭に_を使うことだけは出来ません。

例）
defsub subname

以下のスクリプトで
subname
とあると、
*subname
にgosubジャンプする。

なお、NScripterにもともとある命令名でもdefsubで登録できます。
その場合、ユーザ定義命令が優先されます。
もともとの命令を呼びたい場合は、頭に_をつけてください。
例）
*define
defsub *texton
game

*start
texton ;gosub *textonになる
_texton ;もともとのtextonが呼ばれる


【getparam】
ユーザ定義命令の呼び出し元から、パラメータを取得します。
例）
*define
defsub sub

*sub
getparam $50,%50
;$50に"文字列"、%50に12が代入される
return

*start
sub "文字列",12

このように、数字変数,文字変数に代入できるほか、次のようなことも出来ます。

*define
defsub kakeru_4
game

*kakeru_4
getparam i%50,%51
;i%と書くと、呼び出し元の数字変数の変数番号が取得できる。この場合「３」
mov %%50,%51*4
;%%50と書くと、変数番号「%50」の数字変数への代入になります。つまりこの場合mul %3,4と同じ
return

*start
kakeru_4 %3,10
;%3は10*4=40になる


*define
defsub renketu
game

*renketu
getparam s%50,$51
;文字変数の場合はs%
add $%50,$51
;$%50と書くと、変数番号「%50」の文字変数への代入になります。
return

*start
mov $1,"れんけつ"
renketu $1,"てすと"
;$1は"れんけつてすと"となる。

使用例はサンプルフォルダ内のdefsubサンプルをご覧ください。

なお、呼び出し元でラベル名を指定した場合、呼び出し先では文字列として
読み込むことが出来ます。
NScripterのどの命令でも、ラベル名の代わりに文字列を使うことが出来ると
いうのをうまく利用してください。
たとえば、
*define
defsub usergoto
game

*label
ジャンプしました。\
end

*start
usergoto *label

*usergoto
getparam $0
;ここで、$0に"*label"が入る。
goto $0
;これで、goto "*label"→goto *labelと同じ


＜注意＞
getparamで渡される変数と格納される変数が混在するととてもややこしいので、
defsubサブルーチン内で使う変数と呼び出し元スクリプト内で使う変数は分けましょう。
例えば、%0-%49までを普通のスクリプトで、%50-%99をdefsubサブルーチンで
使うことにして、混在させない。




【readfile】
文字列にファイルを読み込みます。
例）
readfile $0,"file.txt"

【split】
文字列を指定記号を区切りにして切り出して、指定した変数に値を代入します。
プラグインからの戻り値やreadfileで読んだ文字列の処理に使ってください。
例）
split $0,"/",$1,$2,%0,%1,$3

一つ目が切り出す対象文字列、二つ目が区切り文字（一文字でなければなりません）、三つ目以降が代入先変数です。

サンプル）
mov $0,"あいうえお/かきくけこ/15/25/さしすせそ"
split $0,"/",$1,$2,%0,%1,$3

＄１＝$1
＄２＝$2
％０＝%0
％１＝%1
＄３＝$3\


【getcselstr】
例）
getcselstr $0,0
cselで指定した文字列を取得します。数字は選択肢の何番目かです。

デモ用演出命令：
通常時のNScripterの画面表示を行わずに、自前でスプライトを描画する命令です。
重ね合わせ、回転、拡大縮小の機能を上手く使えば、凝った演出が出来ます。
とりあえずデモ用にのみ実装しますが、いずれ回転拡大縮小機能は通常時のスプライトアニメーション機能に追加する予定です。

デモ用命令：画面に直接描画します。セーブしても画面は復帰しませんのでご注意ください。

【drawclear】
書式：drawclear
画面を黒く塗りつぶします。

【drawfill】
書式：drawfill r,g,b
画面をその色で塗りつぶします。ＲＧＢで、それぞれ０〜２５５を指定します。
例）drawfill 255,0,128

【drawbg】
書式：drawbg
ＢＧ画面を描画します。
スプライトも人もテキスト欄も表示されませんのでご注意ください。

【drawbg2】
書式：drawbg x,y,x_scale,y_scale,rot
ＢＧ画面を描画します。
スプライトも人もテキスト欄も表示されませんのでご注意ください。
(x,y)で位置を指定します。
この命令は画面の位置を中心座標で指定しますので、注意してください。
（他の命令のように左上の座標ではありません）
x_scale、y_scaleは、縦横の拡大率です。単位は％です。
rotは回転の角度です。反時計回りで、単位は度です。
例）drawbg 320,240,200,300,15
(320,240)を中心にして、横に２倍縦に３倍、反時計回りに１５度傾けて背景を書く
なお、はみ出た部分は描画されないので前の画像が残ります。それではまずい場合は、事前にdrawclearなどで消しておいて下さい。

【drawsp】
書式：drawsp spnum,cellnum,alpha,x,y
スプライトを描画します。スプライト番号、セル番号、透過度、α値、表示先左上x座標,表示先左上y座標を指定します。通常モードでのスプライトの位置、表示非表示は関係ありません。
スプライトやテキストウィンドウは、新しく書いたほうが上へ重なります。
例）drawsp 2,1,128,20,40
座標(20,40)に、スプライト２番セル１番を、透過度128で表示します。

【drawsp2】
書式：drawsp spnum,cellnum,alpha,x,y,x_scale,y_scale,rot
スプライトを描画します。スプライト番号、セル番号、透過度、α値、表示先中心x座標,表示先中心y座標を指定します。通常モードでのスプライトの位置、表示非表示は関係ありません。スプライトやテキストウィンドウは、新しく書いたほうが上へ重なります。
この命令も、中心座標での指定になりますので、ご注意ください。

例）drawsp2 2,1,128,20,40,150,60,-10
座標(20,40)に、スプライト２番セル１番を、横１．５倍、縦６０％，時計回りで１０度傾けて、透過度128で表示します。


【drawtext】
書式：drawtext
テキストウィンドウを書きます。これより前に書いたスプライトは下に、後に書いたスプライトは上に来ます。

【draw】
書式：draw
これらの命令で描画した画像を実画面に転送します。これがないと表示されません。


以上の命令を使って、たとえば次のようなスクリプトを試してみてください。

*test
saveoff
;デモ処理はsaveoffしたほうが速くなります。終わったらsaveonを忘れずに
mov %0,0
bg "bg.bmp",1
*lp
resettimer
drawclear
drawbg2 320,240,100,100,%0*2
draw
wait 5
;ウェイトを多少いれないと、メッセージ処理が遅れがちになります。
gettimer %1
if %1>=50 add %0,%1/50
if %1<50 waittimer 50:inc %0
;掛かった処理時間に比例して変数を変化させます。
goto *lp


以下はdefine節でも*start移行でも使える命令です。

rubyon
ルビモードになります。文字は下詰めになります。
デフォルト設定では、ルビは本文の文字の縦横半分になります。
rubyon 10,8
ルビの大きさを指定します。横10縦8ドットになります。
アンチエイリアスの都合上、最低１３ｘ１３はないと見づらいかもしれません。
rubyon 14,12,"ＭＳ ゴシック"
ルビのフォントを指定できます。省略すると、テキストと同じ書体になります。
rubyoff
ルビモードをオフにします。

setwindow時に、縦の字間を、最低ルビの縦サイズと同じだけ開けてください。
縦書きモードでもルビ機能は使えます。その場合、横の字間を開けてください。

１１／２１更新：

●savescreenshot2命令追加
getscreenshotで取得した画像は、savescreenshotでは消えてしまいますが、こちらでは消えません。連続してセーブできます。
(getscreenshot savescreenshotについては030614の説明をご覧下さい）

●deletescreenshot
savescreenshot2命令と組み合わせて使います。取得した画像を消します。

●ルビ機能実装。define節でrubyonを実行すれば使えます。
以下、サンプルスクリプトです。

----
*define
rubyon
game
*start
setwindow 10,10,20,20,24,24,0,12,0,1,1,#ffffff,0,0,639,479
ルビ機能の(暫定仕様/ざんていしよう)です。@
ｒｕｂｙｏｎ時、(文字/もじ)は(下詰/したづめ)で表示されます。@
(縦/たて)の(字間/じかん)を、ルビが入る分とって下さい。@
「(承/うけたまわ)」る、とか、「(論理的/ロジカル)」みたいに、文字幅をあわせようとする機能がついてます。
ルビは折り返し改行されませんのでご注意ください。\
end
----

今後の予定
●00.txt〜09.txtのときに、デバッグ時の行番号表示がおかしくなるので修正する
●デモ用の機能追加（具体的には、Ｆａｔｅの画像効果のようなものを作れるような簡易スクリプトを別に組んで、それを再生するように作る予定です）

商業の関連でいくつか更新しました。
また、dwave命令でのogg再生がサポートされました。

・ogg再生機能
フォルダ「ogg再生用DLL」に入っているoggdecode.dllを
NScr.exeと同じフォルダに置くことで、oggを再生できます。
なお、このＤＬＬはBSDスタイルのオープンソースな
ライブラリを利用して作られています。
配布の際には、同じフォルダにあるreadme.txtを読んで
ライセンスを破らないように使ってください。

oggは再生前にすべてデコードしてしまいます（ストリーミングしません）
よって、長さが１分を超えるようなファイルだと再生までにラグが生じます。
この機能はボイスやＳＥの圧縮を想定して用意したものです。
それらはせいぜい数十秒程度の長さでしょうから、ラグも小さく、
問題にはならないかと思われます。

・getpage命令の追加
btndefとbtnwait系命令の間に入れてください。
PageUp PageDownをボタンモードで拾えるようになります。
・getinsert getzxcの追加
上に同じく、insertキーやz,x,cキーを拾えます。

ボタンモードはだいぶややこしくなってきてるので、
どこかで一度綺麗に整理したいです。

・00.txt〜09.txtに対応。
これからは、0.txt〜9.txtではなく00.txt〜09.txtを
使うことをお勧めします。
エクスプローラーで整列した時に順番どおりになってくれます。
それにともないnscmake.exeも新しくなっています。

・スクリーンショットを取れるようになりました
getscreenshot xサイズ,yサイズ
でスクリーンショットをメモリ内に確保し、
savescreenshot "ファイル名"
でそのファイル名で保存します。

・ローカル変数とグローバル変数の境目を変えられるようになりました
スクリプトの一行目で、
;value500
グローバル変数が５００番からになります
（数字は０〜４０００の間で任意の数字です）
もし８００ｘ６００モードと併用される場合は、
;mode800,value500
としてください。

・三角関数が追加されました
sin cos tanが使えます。
形式は、
sin %変数番号,角度（単位はディグリー(度)）
です。
値は１０００倍されたものが帰ってきます。
tanは90度,270度に特異点を持つことに注意してください。
例）
sin %0,90
;%0=1000になる。
cos %1,60
;%1=500

【setwindow3】
回想バッファをクリアしない以外はsetwindowと同じ。
ただし、同じ縦横幅でないと、回想モードに入ったときにバグる。

【allsphide】
すべてのスプライトを一時隠します

【allspresume】
allsphideで隠したスプライトを表示します

【getcursorpos】
例）
getcursorpos %0,%1
テキストウィンドウにおける文字の表示位置を得ます

【getnextline】
例）
getnextline %0,%1
テキストウィンドウにおける次の行の行頭の位置を得ます。

【btnarea】
btnarea 数字
btndefの下で使ってください。
負ならば絶対値を取って、その数以上、正ならばその数以下の位置にカーソルが来たときに、ボタン命令で-4を返します。


【chvol】
例）
chvol 3,100
dwaveチャンネルのボリュームを変えます。セーブされないので手動で管理してください。
この場合だとチャンネル３をボリューム１００にします（０−１００）

【effectcut】（define節専用）
スキップ時エフェクトをカットします。

【btnnowindowerase】（define節専用）
ボタン時にテキストウィンドウが消えなくなります。

【windowback】(define節専用）
立ち絵より上、立ち絵よりも上のスプライトよりは下にウィンドウが来るようになる。

【lookbacksp 上スプライト番号,下スプライト番号】(define節専用）
例）
lookbacksp 2,3
バックログボタンがデフォルトのものではなくスプライトボタンになる。

【windowchip】(define節専用）
例）
windowchip 2
指定したスプライトがテキストウィンドウと一緒についたり消えたりするようになる

【shadedistance】(define節専用）
例）
shadedistance 2,3
影の位置を指定する。この場合右に２ドット下に３ドットずれる。

【spfont】(define節専用）
例）
spfont "フォント名",横幅,縦幅,横字間,縦字間,太字フラグ,影フラグ
文字列スプライトのフォントを設定する
spfont clear
フォント設定をクリアして、setwindowを反映するモードに戻す
spfont "フォント名"
:s;という形式を使わない場合のみ、フォント名以外の全てのパラメータを省略できます。


【文字列スプライトのサイズ指定機能】
例）
lsp 0,":s/16,40,4;#888888#FFFFFFスプライト文字列です。",100,100
lsp 1,":s/48,12,1;#888888#FFFFFFスプライト文字列です。",250,250
順に、横幅、縦幅、文字間、です。

【gettext】
例）
gettext $0
現在テキストウィンドウに表示されているテキストを取得します。

【minimizewindow】
例）
minimizewindow
ウィンドウを最小化します。

【movemousecursor】
例）
movemousecursor 100,10
マウスを画面上の任意の位置に移動させる。この場合100,10

【if文で文字列の比較に対応しました。】
例）
if $0=$1 goto *equal
>や<も使えます（辞書順）

【btntime2】
btntimeとほぼ同じだが、ボイスの発生終了まで待つ

【gettab】
【getfunction】
【getcursor】
【getenter】
それぞれ、btndefとbtnwait系命令の間に挟む。
gettabを使えばtabキーを押したときに=-20が、
getfuncrionならF1〜F12を押したときに-21〜-32が、
getcursorならカーソル上右下左で-40,-41,-42,-43が、
getenterならリターンキーを押したときに-19が返るようになる。

例）
*define
game
*start
btndef clear
gettab
getcursor
getfunction
getenter
btnwait2 %0
%0@
end


mp3命令はDirectShowを使っていますので、メディアプレイヤーで再生できる
音声ファイルならmp3に限らずWAVでもWMAでも再生できます。
（ただし、WMAはメディアプレイヤーそのものをインストする必要アリ）
たとえばADPCM形式WAVをmp3命令に投げてBGMとして使うことも出来ます。

mpegplayもDirectShowを使っていますので、メディアプレイヤーで再生できる
ムービーファイルはなんでも再生できます。
（この場合もデフォルトのWIndowsがそれをサポートしているのかどうかに注意。
　ちなみにMPEG-1はDirectX8.0が標準でサポートしていますので大丈夫。）
AVI命令よりはこっちを使っていただけたほうが助かります。

jumpfとjumpbですが、この命令よりもgoto文のほうがはやいのと、
表示文をはさむと誤動作するため、あまり使わないほうがいいと思われます。

soundpressplginの仕様はあまりお勧めしません。
確かに小さくはなるのですが、少し重いですし、
これで小さくするよりはADPCMにしたほうが効果は大きいです。

追加命令（変数番号は適当につけてます）：
transbtn
　btndefとbtnwait系命令の間に挟んでください。
　そのボタン命令において、ボタン画像の透過部分をボタンとして無効にします。

spclclk
　btndefとbtnwait系命令の間に挟んでください。
　そのボタン命令において、スペースバーを左クリックと同じ動作にします。

getpageup
　btndefとbtnwait系命令の間に挟んでください。
　そのボタン命令において、pageupを取得します。
　pageupを押すと-12を返します。

spwait スプライト番号
　そのスプライトのアニメが一巡するまで待ちます

bgm "ファイル名"
　mp3loop命令と同じ意味です。

bgmonce "ファイル名"
　mp3と同じ意味です。

date %0,%1,%2
　日付の取得。年月日。

time %0,%1,%2
　時刻の取得。時分秒

itoa $0,%0
　数値を文字列に変換

atoi %0,$0
　文字列を数値に変換

len %0,$0
文字列の長さを返します。

mid $0,$1,%0,%1
文字列$1の%0文字目から%1文字分の部分文字列を$0に切り出します。
ただし、最初の文字を０文字目と数えてください。

usewheel
(define節のみ)ボタン命令でホイールを使う設定にします。
ホイールは-2（上）と-3（下）を返します。
この場合、btntimeの時間切れは-5を返すようになります。

useescspc
(define節のみ)ボタン命令でescボタンとspcボタンを使う設定にします。
escボタンは-10、spcボタンは-11を返します。

linepage
(define節のみ)
以後、表示文の末備に自動的に\を補います。つまり、
本文を普通に書いていけば、それは一行辺り一ページになるわけです。
ＡＶＧタイプのゲームを作るときに便利です。

noteraseman
(define節のみ)
ウィンドウ消去時、人を消さなくなります。


v数字:
dv数字:
ボイスを入れるときに便利な命令です。それぞれ、
wave "wav\数字.wav"
dwave 0,"wav\数字.wav"
と等価です。次のように使います。
dv0001:「これが０００１番のせりふだよー」

flushout エフェクトにかける時間（ミリ秒)
特殊効果です。やや重め。
命令の後は必ず別の背景をロードして表示してください。

skipoff
スキップ状態を強制解除します。

menu_dwavvol
ボリューム変更ダイアログを表示します。

cellcheckspbtn (パラメータはspbtnと同じ)
基本的にはspbtnと同じですが、セルが二つ以上ない画像の場合は無視されます。
これはＣＧモードのときに有効に使えます。
（つまり、サムネイルはセルがひとつだけにしておけば、
　spbtn登録はループで一気に行える）



tablegoto %0,*label0,*label1,*label2,...
　テーブルジャンプ。
　変数の値が０ならひとつめ、１ならふたつめ……と、
　羅列したラベルの先へとジャンプする。


atoi 数字変数,文字列
文字列を数字に変換します。Ｃ言語の同名関数と同じです。
例）
	atoi %0,"123"
	atoi %3,$0

itoa 文字変数,数値
数値を文字列に変換します。ただし、半角文字になります。
例）
	itoa $0,120
	itoa $1,%2


dwave 数字,ファイル名
	DirectSoundでＷＡＶファイルを演奏します。
	数字はチャンネルＮＯで、０から４９までです。
	違うチャンネルの音はミキシングされて同時再生されます。
	なお、オートモードでの再生終了待ちはチャンネル０で行います。
	再生できるのはＰＣＭ形式だけです。
	wave系命令と同時に使用することも出来るので、たとえばMP3コーデックでの
	ＢＧＭをwaveloop命令で鳴らしつつ、こっちで音声再生という使い方が出来ます。
例）
	dwave 0,"test.wav"

dwaveloop 数字,ファイル名
	dwaveと同じ書式ですが、こっちはループ再生します。

dwavestop 数字
	そのチャンネルの再生を止めます。

■新しくNScripterでゲームを作る方は、NSAアーカイブを使ってください。
　あらゆる点においてNSAはSARと同程度かそれ以上のパフォーマンスを
　発揮します。また、SPB形式はNSAがBMPを扱うときの機能の一部として
　取り込まれていますので、個別に使うメリットはありません。

■QUAKE命令を追加
　前のQUAKEX QUAKEY命令はマシンに掛ける負担が大きかったので、
　昔のノートのビデオカードの一部でとても遅くなる現象があった
　ようなので、新しく作りました。遅いマシンでも問題無く動くと思います。

QUAKE 振幅,時間（ミリ秒単位）　例）QUAKE 8,1000

画像タグsを追加。
書式：":s#rrggbb#rrggbb……文字列"
例）
":s#ffffffテストです" 
　……白（#ffffff）で、「テストです」という文字列の画像になる。
":s#ff0000#00ff00あいうえお"
　……セル数２，セル番号０が赤（#ff0000）、セル番号１が緑（#00FF00）で
　「あいうえお」という文字列の画像が出来る。
":s#ff00ff$0"
　文字列$0の内容で、紫（#ff00ff）の画像になる。

lsp 0,":s#444422#FFFFAA文字列でボタン",100,100
btndef clear
spbtn 0,1
btnwait %0

こんな感じで使います。
なお、文字列画像はファイルログには追加されません。

●画像指定タグにmが加わりました。

書式：
":mマスク画像ファイル名;元画像ファイル名"
例）
":mmask.bmp;pict.bmp"

現在、セル数が１の画像にしか対応していません。

●DirectShowによるmp3再生のサポート。
昔の仕様どおりのmp3命令やmp3loop命令が使えます。
DirectShowを使うので、以前のバージョンで使っていたdllは
必要ありませんが、DirectX7以降が必要になります。
（bgm命令はmp3loop命令とまったく同じです。）

命令getversionを追加。
例）getversion %0
バージョンは３桁の整数で返ってきます。
実際のバージョンの１００倍の数字です。
つまり、Ver1.90ならば190になります。

命令dwaveload dwaveplay dwaveplayloopの追加

例）
dwaveload 0,"test.wav"
dwaveplay 0
dwaveplayloop 0
これで、前もってWAVをメモリにロードしておいて、
それを再生することが出来ます。


命令trap2 lr_trap lr_trap2を追加。
これらはtrapと同じパラメータを取るtrap系命令です。
trap     …… 左クリックのみに反応
lr_trap  …… 左右クリックに反応
trap2    …… 左クリックと「次の選択肢に進む」に反応
lr_trap2 …… 左右クリックと「次の選択肢に進む」に反応

この辺の命令仕様がどうも美しくないので、そのうち
統合するような命令を作るかもしれませんが、これらの
命令は今後ともサポートしますので、お使い下さい。

命令timertrapを追加
例）timertrap *label,1000
指定したミリ秒後に割り込みが掛かってジャンプします。
ただし、個々の命令の動作の隙間でしかタイマ判定しないので、
ウェイト状態（ボタン待ちや、click,delay,wait命令、
デフォルトでの@ \など）のときには割り込みが起きません。
元々NScripterはスクリプトからのタイマー割り込みを想定
している言語ではないので、使い方が結構難しい命令です。

trap系命令とtimertrap命令に新しいオプションstopとresumeがつきました。

例）
trap stop
lr_trap resume
lr_trap2 stop
trap2 resume

trap offとすると、割り込み設定自体がクリアされてしまいます。
対して、trap stopは割り込みを一時的に禁止するだけです。
trap resumeは再び割り込みを許可する命令です。
もしtrap stopしている間にクリックしていた場合、
後でtrap resumeを実行すると、そこで割り込みが発生します。

命令spwaitを追加しました。

例）spwait 2
指定したスプライト番号のアニメーションが終わる
（最初のコマに戻るか、もしくはストップする）のを待ちます。

命令mousecursorは今のところ使わないで下さい。
機種によって動いたり動かなかったりのようです。

命令nsadirを追加（nsaファイルを読みにいくディレクトリを指定できる。）

*define節でmode_extを使うと、メニューからボリューム変更ダイアログが
使えるようになる。（MP3(BGM) voice(DWAVE 0) SE(DWAVE 1〜)のボリュームを
いじれるようになりました。）
この辺の拡張機能の追加についてはもうちょっとすっきりした命令を作る予定
（今有効な命令は将来的にもちゃんと使えます。）

bgmfadeout 数字
　BGMのフェードアウトの時間を指定
　define節でも実行節でも使えます。

mp3save ファイル名
　mp3と同様一回だけの再生ですが、再生中にセーブするとロード後も再生されます。

defvoicecol 数字
defsevol 数字
defmp3vol 数字　もしくはdefbgmvol 数字
を追加。デフォルトボリュームをいじれます。デフォルトでは１００
（０から１００です。）
*define節専用です。

voicecol 数字
sevol 数字
mp3vol 数字（もしくはbgmvol）
ボリュームをいじれます。ただし、セーブはされませんので、手動で管理してください
（０から１００です。）
実行中にも使えます。

【FOR〜NEXTループ命令を追加】

書式：
FOR %変数番号=数字 TO 数字 (STEP 増分)
;（ループの内容）
NEXT

基本的にBASICと同じです。指定した変数がTOで指定した数を超えるまで
（STEPが負の時は、それより小さくなるまで）は、ループを繰り返します。
一回ごとにSTEPで指定した数を変数に加えます。
STEPは省略すると1になります。

（注意）
FORループをgoto文やselect文で抜けないでください。
（ループ内からgosubで飛んでループ内に戻ってくるのはＯＫです。）

書式：
BREAK
一番内側のループをひとつ、途中で抜け出します。
すぐ下のNEXT文を探し、その下へ抜けます。

二重ループを一気に外まで抜けることはできません。
一重めのループをBREAKで抜けた後、さらに次のBREAKを書いてください。

サンプル：
;------------------------
*define
game
*start
for %0=1 to 8
    for %1=6 to 2 step -2
        %0，%1
        if %0=4 & %1=4 break
    next
next
click
end
;------------------------


【お勧めしない使い方】
BREAK *ラベル名
BREAK文に*ラベル名があればそのラベルに飛びます。
ただし、ラベル指定でふたつのループを抜けても内部的には
一番内側のひとつしかループ状態を解除しませんので、不具合の元になります。

基本的に、FOR文は途中で抜けることを想定しない簡単な処理に使ってください。

【CTRLキーでメッセージスキップできるようにした】
これからは、これをオフィシャルなスキップキーにします。

【セーブファイルの日時の取得関数】
命令savetime
書式：
savetime セーブ番号,%月,%日,%時,%分
セーブファイルが存在しない場合は、月の値に0を返す。

例）
savetime 3,%0,%1,%2,%3
if %0=0 goto *non
セーブ３番は%0月%1日%2時%3分@
end
*non
セーブ３番は存在しない。@
end

【配列変数を使えるようにした】
?配列番号[添字1][添字2]...
（全部で２００個までの配列、２０次元まで使用可能です）

＜使い方＞
*define節で配列変数を宣言してください。
命令dim
書式：
dim ?0[10][20]
配列変数はBASIC式です。つまり、この宣言だと、?0は、
一次元目が0〜10の、二次元目が0〜20の添字を使えます。

mov ?0[2][5],20
;?0[2][5]に20を代入。
mov %4,?0[3][1]
;%4に?0[3][1]を代入。
？０［２］［３］＝?0[2][3]@
;値を表示
このとおり、今まで「数字」となっていたところならどこでも
配列変数を使えます。

numaliasを使えば、もっと見やすく出来ます。
例）
numalias enemyparam,10
dim ?enemyparam[10]

【命令movlを追加】
配列の行に対して一度に値を代入します。
movl 配列行指定,数字,数字,……

例）
dim ?10[4]
dim ?20[2][3]

movl ?10,0,1,2,3,4
movl ?20[0],0,1,2,3
movl ?20[1],0,2,4,6
movl ?20[2],0,3,6,9

＜注意＞
配列の添字は0からはじまるので、一列の長さは宣言のときの
数字よりもひとつ多いことに気をつけてください。

【MPEG再生機能の追加】
命令mpegplay
書式：
mpegplay ファイル名文字列,クリックフラグ
例）
mpegplay "test.mpeg",1
解説：
ファイル名に指定したファイルをDirectShowの機能で再生します。
クリックフラグが0だとクリックしても再生をやめませんが、
クリックフラグが1の場合は、画面クリックで再生を中止します。
この命令を使うには、DirectX8.0a以上が必要です。
（古いDirectXでも使えるかもしれませんが、サポート対象にはしません）


命令btntimeとgetbtntimerを追加しました。

btntimeは、次のbtnwaitもしくはbtnwait2の時間制限をミリ秒で指定します。
この命令を使った直後のボタンモードで、何も押されずに指定した時間が過ぎると、
btnwait系命令は-2を返します。

getbtntimer %0
たとえば、右クリックなどで抜けた後、再び処理をbtnwaitに戻したいとします。
その場合、btnwait命令が実際には何ミリ秒を使ったのかをgetbtntimer命令は
返してくれるので、その分引いた秒数で実行すればうまくいきます。


*define節命令kidokuskipを追加しました。
この命令を使うと、「次の選択肢へ進む」が既読スキップになります。
既読データはファイルに保存されますが、スクリプトが変わると、
変わった部分以降はずれてきます。



命令date,timeを追加しました。現在日付／時刻の取得命令です。
例）
date %0,%1,%2
%0に年、%1に月、%2に日が入ります。

time %0,%1,%2
%0に時、%1に分、%2に秒が入ります。

命令inputが追加されています。
input "説明テキスト","デフォルト文字列",最大文字数,全角フラグ　です。



■setwindow2

（使い方）
setwindow2 "ウィンドウＣＧファイル名"
もしくは
setwindow2 #色タグ指定

（例）
setwindow2 ":c;twindow2.bmp"

回想バッファを消さず、今表示しているウィンドウも文字も消さず、
ウィンドウの見た目だけを変更する命令です。
setwindow命令のタグ指定もしくはウィンドウＣＧ指定の部分だけを
指定することが出来ます。他は何も変えられません。

■savegame セーブ番号
　そのセーブ番号にセーブします。何の確認もしませんので注意。

■loadgame セーブ番号
　そのセーブ番号からロードします。何の確認もしませんので注意。
　もしロードが失敗すると、何も起こらずに次の処理に移ります。

■savefileexist 数字変数,セーブ番号
　もしセーブファイルが存在すれば１、しなければ０を返します。

新命令）
作業の都合で作った命令とかもあって、あんまり使えないかも
●isskip %数字変数
例）isskip %0
現在がスキップモードなら１、オートモードなら２、通常モードなら０を返します。

●bw2a "画像ファイル名（先頭部分）"
例）
bw2a "test"
test_w.bmpとtest_b.bmpからNScrのα値形式ＢＭＰを作ります。
付属しているbw2aconv.exeと同じ動作です。

＜豆知識＞
コマンドプロンプトから
dir /b > filelist.txt
とかをやるとファイルリストが取れるので、
それと組み合わせて一括変換に使うといいでしょう。



●bmpcut "画像ファイル名",横分割数,縦分割数
例）
bmpcut "test.bmp",3,2
これでtest.bmpを横３縦２に分割してＢＭＰ形式で保存します。
ファイル名を投げやりにつけるので注意。


●systemcall resetdlg
リセットダイアログを出します。
キャンセルできることに注意

●winexec "実行ファイル名",数字
外部実行ファイルを実行します。WinExec ＡＰＩを使います。
フルスクリーン時にはSW_MAXIMIZE、通常スクリーン時にはSW_SHOWNORMALを指定します。
数字に０以外を指定すると、そのプログラムと同期動作します。
NScripterのウィンドウにWM_USER+10が送られてくれば実行再開、WM_USER+20が
送られてくればプログラムを終了します。
数字に０を指定すると、起動するだけでプログラムは先へ進みます。
Dolls Antiqueのデモプログラムとの連携に使った命令です。

●shell "ファイル名"
エクスプローラーからそのファイルを実行します。
ShellExecute ＡＰＩを使います。同期実行はしません。

●chainbmp "画像ファイル名"
out.bmpの隣にその画像ファイルを貼り付けていきます。
out.bmpが無ければ作成します。
画像の縦幅は同じ必要があります。
あまり使い勝手よくないです。

●mv数:
voice\数.mp3をmp3命令でボイス扱いで再生します。
例）
mv00001:
「これでｖｏｉｃｅ￥００００１．ｍｐ３が再生されます」

●createdummy "ファイル名"
その名前でダミーBMPファイル(640.480)を作ります。
真っ白背景に黒字でファイル名がでかでか書かれます。
例）
createdummy "test.bmp"

deletemenuを追加しました。*define節専用，NScrからWindowsのメニューバーをなくせます。

NEGAのバグを修正しました。

現在フルスクリーンかどうかを取得する命令isfullを作りました。
isfull %変数番号
Alt+Returnでもスクリーンモードを変えられるので、この命令以外では
現在のスクリーンモードは取得できません。



今回の更新は、以下のとおりです。
・回想バッファが時々クリアされていた仕様を修正して、いつでも戻れるようにした
・簡易デバッガが付いた(詳細はnscrデバッガ.txtを参照のこと)
・ＮＴ系でフルスクリーン時にリフレッシュレートが変わるバグ修正
・命令追加：loopbgm loopbgmstop

loopbgm "冒頭部ファイル名","ループ部ファイル名"
loopbgmstop

（使用例）
loopbgm "bgm_s.wav","bgm_l.wav"
bgm.s.wav -> bgm_l.wav -> bgm_l.wav -> ...(以後ループ)
という風に演奏します。

loopbgmstop
停止します。

鳴らせるファイルはwaveファイルだけです。
ボリュームはmp3vol、フェードアウト設定はmp3fadeoutに従います。
ボリュームダイアログにも対応しています。

・外部ＤＬＬで描画する機能を追加。
　命令追加：setlayer,layermessage,getret
　詳しくは「ＤＬＬによる機能拡張サンプル」フォルダをご覧ください。

この機能を利用してパーティクル機能（雨を降らしたり雪を降らしたり）を作る予定。
（僕が作る分にはＤＬＬで分離する必要はないんで内部にリンクしてしまうかもしれないですが）
メッセージ処理が出来るので、描画だけではなく色々な拡張機能を作れるでしょう。
プログラムが出来る方は、ＤＬＬの仕様も載っているので、それを参考にして
オリジナルのプラグインを作ってみてください。
この機能はまだまだ検討段階です。不具合がありましたらどんどんご連絡ください。
開発者の方々からの御意見をいただければ、仕様に反映していけると思います。
とりあえず、あまり出来は良くないですがサンプル用の雪プラグインを作りました。
いずれちゃんとしたのを作りますが、少し更新は休みます。

更新が遅れております。商業利用での要望による機能追加を
最優先としておりますが、その次に以下の機能を実装する予定です。

・ルビ機能
・CLICKSTRがシステムカスタマイズ時正しく働かない問題の修正


---
＜配列が必要なときの代替手段＞
%数字、が数字変数を表すのはご存知でしょう。
%0が０個目の数字変数
%1が１個目の数字変数を表しています。

ここで、%数字の「数字」の部分にも数字変数を使うことが出来ます。すなわち、
%2が12のとき、%%2は、１２番目の数字変数、すなわち「%12」で表される変数と同じ物を表しています。

サンプル：

mov %3,4
mov %%3,12
変数４番は%4です。

実行結果：

変数４番は１２です。

これを上手く使えば、ＳＬＧなどで必要なテーブル参照が出来ます。

---


以下はNScrに、過去のさまざまな事情から追加されていた／今現在の事情から追加した隠し命令の一覧票です。
なぜマニュアルに発表しないかというと、やっつけ仕事的な仕様になっているとか、使い方が難しいとか、用途が特殊過ぎるとかいう理由です。
いずれ正式命令に格上げになる予定のものもあります。
代替命令ができる予定のものもあります。
どちらにしろ、命令から削除されることはありませんので使っても大丈夫ですが、あまり強くお勧めはしません。

"mov3"

書式：mov3 数字変数,数字,数字,数字
機能：最初に指定した数字変数から順に３つ、数字を代入する。
使用例：
mov3 %3,2,4,6
これは、
mov %3,2
mov %4.4
mov %5,6
と等価です。
単純に、３つの値をテーブルに代入する作業が楽になる命令です。

同様の命令に、"mov4" "mov5" "mov6" "mov7" "mov8" "mov9" "mov10" があります。
それぞれ、４、５、６、７、８、９、１０個の代入を楽にしてくれます。



automode
この命令を実行すると、メニューに「オートモード」がつきます。
オートモードは「次の選択肢まで進む」に似ていますが、ウェーブが
なりおわるまで先には進まず、ウェーブがないところでも、下のautomode_time命令で
どのくらいクリックまでに待つか指定することが出来ます。
いわゆる読み上げモードですね。


"mode_saya"
古い命令ですので、使用はあまりお勧め出来ません。windowchip命令で代替出来ます。
同ソ「莢〜背徳の迷宮〜」のために作った命令です。
この命令を実行すると、動作が莢モードになります。
莢モードでは、
・文字ウィンドウが消えているとき、表示状態に関わらず、
　スプライト０〜９が非表示になります。
・文字ウィンドウが消えているとき、以下で説明するバーや数字表示が非表示になります。
この二つは、例えば「パラメータウィンドウ」みたいのを、テキストウィンドウを
消すのと同時に消したいときに使えます。


"automode_time"
　上のmode_extで増える「オートモード」のとき、ウェーブがなっていないときに
　どのくらい待つのかをミリ秒単位で指定します。

"systemcall rmenu"
　右クリックメニューと同じ効果です。
　これは、例えばボタンモードで右クリックしたときに、右クリックメニューを
　出したいな、というときに使えます。
　右クリックメニューから出ると、動作はこの命令の次の文へうつります。
（画面状態をうまく把握していないと、おかしなことになります。
　この命令の直後にテキストウィンドウの内容を消して書きなおすのが
　ベストかと思われます。）


"barclear"
　バーの設定をクリアします。
　バーとは、格闘ゲームの体力バーみたいなもののことです。

"prnumclear"
　数値ラベル設定をクリアします。

"bar"
書式：bar バー番号,現在値,x,y,幅,高さ,バーの最大値,色

機能：
　バー表示指定をします。幅と高さは、バーが最大値であったときの値です。
　最大値に満たない場合は、割合に合わせてバーが短くなります。
　バーは左詰表示です。単純に長さにあわせて指定した色で塗りつぶすだけなので、
　値が足りないときの地の色は、元絵のほうで描いてしておいてください。
　なお、指定した後でprint命令などの表示処理を実行しないと、画面に反映されません。

使用例：bar 1,23,5,5,200,8,100,#FF7777

"amsp"
書式：amsp スプライト番号,x,y,透過度
機能：mspと似ているが、こちらは増分ではなく絶対指定。
使用例：
amsp 2,5,2,100
　これで、スプライト２番が、(5,2)に移動し、透過度は１００になる。

"btndef clear"
ボタン設定で、メモリ内のボタン画像ファイルはそのままだが、登録したボタン設定だけを消去する。
btndef ""はメモリ内のボタン画像ファイルを消去してしまうことに注意
ボタン画像をひとまとめにつくっておいて、あとで読みなおしたりしなくても
いいようにする最適化のための命令です。
btnwait2とうまく組み合わせて使ってください。

なお、btnwait2とbtndef clearを使って処理している場合、自分でbtndef ""をやるか、
プログラム自体を終了するまでは、ずっとメモリ上にそのボタン画像があることになります。
ムダ遣いにならないようにうまく解放してください。

このへんは、プログラマ的な素養がちょっと必要かもしれません。

"blt"
書式：blt 画面上のx,画面上のy,画面上の幅,画面上の高さ,ボタン画像上のx,ボタン画像上のy,ボタン画像上の幅,ボタン画像上の高さ

機能：
　高速に画面上で画像表示をしたいとき（ＡＩＲのオープニングのようなアニメーション処理）に使う命令です。
　ボタン画像バッファを利用しますので、事前にbtndefで画像を読みこんでください。
　ボタン画像から読んでくる元画像の幅が画面上の幅と違うときは、画面にあわせて画像が拡大縮小されます。
（例えば、全画面のＸＹ半分のサイズの画像を４つ描いたものをロードしておいて、高速に拡大しながら画面全体に表示していくと、残像効果でドットの荒さは見えず高速なアニメに見える、というテクニックがＡＩＲでは使われています。）
　この命令はバッファを介さず直接スクリーンに画像を書きます。よって、終わった後は画面データが不定になるので、下のofscpy命令を使った後、必ず別の画像をふつうのbg命令などで呼び出して、画像を確定してください。

　セーブによっても、この命令の結果としての画像がセーブされたりはしません。
　よって、使われる部分は限られてきます。（デモとか、ＳＬＧでの小窓アニメなど、間にセーブやコマンド入力が挟まれないような処理）

"ofscpy"
書式：ofscpy
機能：上のblt命令で描かれた画像をオフスクリーンバッファに転送する。
解説：
　上の処理を終わってから何かエフェクトをかけたいとき、この命令でオフスクリーンバッファに
　今の状態をコピーしてから行います。
　この命令で作られたオフスクリーンバッファは、エフェクトのときには正しく動作しますが、
　セーブ・ロードでは記憶されません。あくまでつなぎのための命令です。

　blt命令にしろ、ofscpy命令にしろ、高速なデモ処理（ＡＩＲのような）をやるために
作られた特殊な命令なので、使い方が結構難しいですが、ご了承下さい。


使用例：


btndef "〜"
;アニメ用の画像を読んでおく。

bg 〜
ld c,〜
;ここまでは普通の画面命令なので、普通に動く。

resettimer
blt 〜
waittimer 100
blt 〜
waittimer 100
;このへんで、高速な画像処理をしている。

;blt処理をしてから普通の画像命令を使いたいときは、その前にofscpy命令を使うこと。
ofscpy
bg 〜

;あとは普通にやっていい。
bg 〜
ld c,〜




＜暫定命令について＞
・mov3〜mov10は正式命令に格上げされました。

・mode_extは、automodeという名前の命令と同じ意味になります。

・automode_time,systemcall rmenu,bar・prnum系命令,amsp,blt,ofscpyは正式命令に格上げされました。

＜追加命令について＞

いっぱいあるのですが、システムの根幹に関わるような命令は、
使い方が複雑なので、後でサンプルを作って説明することにします。
今回は簡単な命令から発表します。

labellog（*define節専用命令）
　ファイルログと同じような形式で、ラベルのログを取ります。
　goto gosub 等の飛び先に指定されたか、スクリプトを読んでいて通過したラベル名をすべて記憶します。


lchk ラベル名
　fchkと同じく、if文中で使います。そのラベルを読んでいれば真です。
　NScrのラベル名には（ここ以外のどの場所でもですが）文字変数が使えますので、
lchk *test
lchk "*test"
lchk $0
　上のみっつは、どれも正しい表記です。



nsa（*define節専用命令）
ＮＳＡアーカイブモードにします。
同梱のnsaarc.exeで圧縮すると作られるarc.nsa内のファイルを読みこめるようになります。
ＤＬＬなどはいりません。nsaファイルはNScripterと同じフォルダにおいてください。
ＢＭＰにはアーカイブ化のときに圧縮がかかります。生ＢＭＰを直接渡してください。
ＮＳｃｒｉｐｔｅｒは、ＮＳＡ内のＢＭＰを扱うときにもっとも高いパフォーマンスを発揮します。
ＮＳＡ内のＢＭＰ形式では、画像ファイルなどを扱うとき、一切の中間ファイルを作りません。

圧縮するのに時間がかかるような巨大なアーカイブは分割管理すると便利です。
arc.nsa arc1.nsa arc2.nsa〜arc9.nsaの１０個のアーカイブファイルを扱うことが出来ます。
この場合、上に書いた順番で検索していきます。



repaint
画面を書きなおします。もし画面が変になってたりしたら、これでなおるかも。



saveon saveoff
セーブモードをオン／オフします。
セーブできなくなるわけではなく、ロードすると最後にセーブオンだったところまで戻されるということです。
saveonの間は、スプライトを動かしたりしただけでもセーブデータを書きこみに行きますので、
場合によってはパフォーマンスに影響が出るかもしれません。
ミリ秒単位でスプライトをいじるようなアニメ処理をしている間はsaveoffにすると動作が速くなるでしょう。



skipoff
「次の選択肢まで進む」や「オートモード」などをそこで停止します。

cell スプライト番号,セルＮＯ
手動でスプライトのセルを指定します。
内部状態を切り替えるだけなので、あとでprintなどで画面に反映してください。



spbtn スプライト番号,ボタン番号
btn命令と同じような使い方で、こちらはスプライトをボタンに指定します。ちゃんと透過とかもします。
押されていない状態がセル０、押されている状態がセル１です。
ボタンを押すと、ボタン番号が帰ってきます。



mode_wave_demo（*define節専用命令）
普通、次の選択肢を飛ばすモードのときはＷＡＶＥはならないのですが、
mode_wave_demoを実行していると、なります。



jumpf
次の~記号までジャンプします。ラベル名を考えるのがめんどくさいときに使ってください。
しかし、当然入れ子構造には出来ないので、とび先がすぐ見えるときだけに限定して使うほうがいいです。

例）
jumpf
この文は飛ばされます。
~
この文は表示されます。



jumpb
直前の~記号まで戻ります。


＜新機能＞
特殊文字列構文
(条件ファイル名）"TRUE文字列""FALSE文字列"
条件ファイル名がファイルログの中にあった（すでにロード済みだった）場合、TRUE文字列、
無かった場合、FALSE文字列を返します。
これは、たとえばＣＧモードのボタンを選ぶときに使えます。
少々みにくいですが、スクリプトを書くのが楽になります。Ｃ言語で言う?:に近いです。
例）
lsp 0,("cg1.bmp")"cg1_sum.bmp""dummy_sum.bmp",0,0
